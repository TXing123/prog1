ECE 695 Project1 Milestone 1Xin TangCurrent Process:I finished the coding for ‘cmdline.c’ file and tested it by printing the tokens. During the test, the program can read most of the command into tokens. However, there was still some problems with the double quote cases. Approach:1. The basic sys call I need are ‘fork()’, ‘execvp()’ and ‘waitpid()’. The main function calls ‘fork()’ to duplicate the current process and use ‘execvp()’ to run the command on the child process. In the meanwhile, the mother process call ‘waitpid()’ to wait until the child process is finished. ‘WEXITSTATUS’ is used to check weather the child process exits normally. If something wrong, abort and print out error message. 2. For redirection, sys call ‘open()’ and ‘close()’ are needed to write/read data from files.3. I think the pipe and parentheses problem are similar. A subshell is needed to finished these kind of commands. Since the results from subshell is required by the main shell, the results should be stored somehow. For now, I want to use a temporary file to solve this problem. Before start the subshell, modify its output redirection into one temporary file that created by the main shell. After the subshell is finished, the main shell read the file and get the result to continue process the rest command. 4. About errors. The command already been grouped into different by parameter ‘controlop’. For each case, the different error message will be created. By doing this, I can easily know which kind of command cannot be processed. For other kind of errors, I’ll try my best to avoid ‘core dump’ or ‘segmentation fault’ and at least give some error message. 5. For command ‘cd’ and ‘exit’. These two command must be executed by the main shell. If we runs these command in child process, it will only change the pwd of child process or terminate the child process. To realize the ‘cd’ command, the ‘chdir()’ is needed. 6. Maybe the ‘pipe()’ function is easier than write a temporary file. But I haven’t look at this function yet. 